service: payment-processing-system

provider:
  name: aws
  runtime: nodejs18.x
  profile: payrix
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  # Lambda Functions will run in the VPC for security
  vpc:
    securityGroupIds:
      - !Ref LambdaSecurityGroup
    subnetIds:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
  # Global environment variables for all functions
  environment:
    NODE_ENV: ${self:provider.stage}

# Define Lambda functions for payment processing
functions:
  # Health check function
  healthCheck:
    handler: src/handlers/health.handler
    description: Health check endpoint
    events:
      - httpApi:
          path: /health
          method: GET
  
  # Get all payments function
  getAllPayments:
    handler: src/handlers/payments.getAll
    description: Get all payments
    environment:
      DB_HOST: !GetAtt AuroraCluster.Endpoint.Address
      DB_PORT: '5432'
      DB_NAME: payrix
      DB_USERNAME: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:username}}' ]]
      DB_PASSWORD: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:password}}' ]]
    events:
      - httpApi:
          path: /api/payments
          method: GET
    iamRoleStatements:
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource: !Ref DatabaseSecret
  
  # Get payment by ID function
  getPaymentById:
    handler: src/handlers/payments.getById
    description: Get payment by ID
    environment:
      DB_HOST: !GetAtt AuroraCluster.Endpoint.Address
      DB_PORT: '5432'
      DB_NAME: payrix
      DB_USERNAME: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:username}}' ]]
      DB_PASSWORD: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:password}}' ]]
    events:
      - httpApi:
          path: /api/payments/{id}
          method: GET
    iamRoleStatements:
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource: !Ref DatabaseSecret
  
  # Create payment function
  createPayment:
    handler: src/handlers/payments.create
    description: Create a new payment
    environment:
      DB_HOST: !GetAtt AuroraCluster.Endpoint.Address
      DB_PORT: '5432'
      DB_NAME: payrix
      DB_USERNAME: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:username}}' ]]
      DB_PASSWORD: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:password}}' ]]
    events:
      - httpApi:
          path: /api/payments
          method: POST
    iamRoleStatements:
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource: !Ref DatabaseSecret
      
  # Update payment status function
  updatePaymentStatus:
    handler: src/handlers/payments.updateStatus
    description: Update payment status
    environment:
      DB_HOST: !GetAtt AuroraCluster.Endpoint.Address
      DB_PORT: '5432'
      DB_NAME: payrix
      DB_USERNAME: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:username}}' ]]
      DB_PASSWORD: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:password}}' ]]
    events:
      - httpApi:
          path: /api/payments/{id}/status
          method: PUT
    iamRoleStatements:
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource: !Ref DatabaseSecret

# Plugin configuration
plugins:
  - serverless-iam-roles-per-function

# Custom variables
custom:
  httpApi:
    cors: true

resources:
  Resources:
    # VPC Configuration
    MainVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: ${self:service}-vpc-${self:provider.stage}
    
    # Internet Gateway for public subnets
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: ${self:service}-igw-${self:provider.stage}
    
    # Attach Internet Gateway to VPC
    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref MainVPC
    
    # Public Subnet in first Availability Zone
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MainVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: 10.0.1.0/24
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-public-subnet-1-${self:provider.stage}
    
    # Private Subnet in first Availability Zone
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MainVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: 10.0.2.0/24
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: ${self:service}-private-subnet-1-${self:provider.stage}
    
    # Public Subnet in second Availability Zone
    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MainVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: 10.0.3.0/24
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-public-subnet-2-${self:provider.stage}
    
    # Private Subnet in second Availability Zone
    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MainVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: 10.0.4.0/24
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: ${self:service}-private-subnet-2-${self:provider.stage}

    # Route Table for Public Subnets
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MainVPC
        Tags:
          - Key: Name
            Value: ${self:service}-public-rt-${self:provider.stage}
    
    # Default Route for Public Route Table
    PublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
    
    # Associate Public Subnet 1 with Public Route Table
    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable
    
    # Associate Public Subnet 2 with Public Route Table
    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet2
        RouteTableId: !Ref PublicRouteTable
    
    # Elastic IP for NAT Gateway 1
    NatGateway1EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
        Domain: vpc
        Tags:
          - Key: Name
            Value: ${self:service}-nat1-eip-${self:provider.stage}
    
    # NAT Gateway 1 in Public Subnet 1
    NatGateway1:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt NatGateway1EIP.AllocationId
        SubnetId: !Ref PublicSubnet1
        Tags:
          - Key: Name
            Value: ${self:service}-nat1-${self:provider.stage}
    
    # Elastic IP for NAT Gateway 2
    NatGateway2EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
        Domain: vpc
        Tags:
          - Key: Name
            Value: ${self:service}-nat2-eip-${self:provider.stage}
    
    # NAT Gateway 2 in Public Subnet 2
    NatGateway2:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt NatGateway2EIP.AllocationId
        SubnetId: !Ref PublicSubnet2
        Tags:
          - Key: Name
            Value: ${self:service}-nat2-${self:provider.stage}
    
    # Route Table for Private Subnet 1
    PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MainVPC
        Tags:
          - Key: Name
            Value: ${self:service}-private-rt1-${self:provider.stage}
    
    # Default Route for Private Route Table 1
    PrivateRoute1:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable1
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway1
    
    # Associate Private Subnet 1 with Private Route Table 1
    PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet1
        RouteTableId: !Ref PrivateRouteTable1
    
    # Route Table for Private Subnet 2
    PrivateRouteTable2:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MainVPC
        Tags:
          - Key: Name
            Value: ${self:service}-private-rt2-${self:provider.stage}
    
    # Default Route for Private Route Table 2
    PrivateRoute2:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable2
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway2
    
    # Associate Private Subnet 2 with Private Route Table 2
    PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet2
        RouteTableId: !Ref PrivateRouteTable2
    
    # Security Group for Lambda Functions to connect to Aurora
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Lambda functions
        VpcId: !Ref MainVPC
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            DestinationSecurityGroupId: !Ref DatabaseSecurityGroup
        Tags:
          - Key: Name
            Value: ${self:service}-lambda-sg-${self:provider.stage}
    
    # Security Group for Aurora Database to allow inbound traffic from Lambda
    DatabaseSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Aurora database
        VpcId: !Ref MainVPC
        Tags:
          - Key: Name
            Value: ${self:service}-db-sg-${self:provider.stage}

    # Database from Lambda Ingress Rule to allow inbound traffic from Lambda
    DbFromLambdaIngressRule:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref DatabaseSecurityGroup
        IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId: !Ref LambdaSecurityGroup
    
    # DB Subnet Group for Aurora to connect to the database
    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: Subnet group for Aurora database
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        Tags:
          - Key: Name
            Value: ${self:service}-db-subnet-group-${self:provider.stage}
    
    # Aurora Parameter Group
    DBClusterParameterGroup:
      Type: AWS::RDS::DBClusterParameterGroup
      Properties:
        Description: Parameter group for Aurora PostgreSQL cluster
        Family: aurora-postgresql16
        Parameters:
          timezone: 'America/Chicago'  # CST timezone
        Tags:
          - Key: Name
            Value: ${self:service}-db-cluster-param-group-${self:provider.stage}
    
    # DB Instance Parameter Group
    DBInstanceParameterGroup:
      Type: AWS::RDS::DBParameterGroup
      Properties:
        Description: Parameter group for Aurora PostgreSQL instances
        Family: aurora-postgresql16
        Parameters:
          max_connections: '200'
        Tags:
          - Key: Name
            Value: ${self:service}-db-param-group-${self:provider.stage}
    
    # Database password stored in Secrets Manager
    DatabaseSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:service}/db/password-${self:provider.stage}
        Description: "Aurora database password"
        GenerateSecretString:
          SecretStringTemplate: '{"username": "payrix_admin"}'
          GenerateStringKey: "password"
          PasswordLength: 16
          ExcludeCharacters: '"@/\'
    
    # Aurora PostgreSQL Cluster
    AuroraCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        Engine: aurora-postgresql
        EngineVersion: "16"
        DatabaseName: payrix
        MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:username}}' ]]
        MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:password}}' ]]
        DBClusterParameterGroupName: !Ref DBClusterParameterGroup
        DBSubnetGroupName: !Ref DBSubnetGroup
        VpcSecurityGroupIds:
          - !Ref DatabaseSecurityGroup
        BackupRetentionPeriod: 7
        PreferredBackupWindow: '03:00-04:00'
        PreferredMaintenanceWindow: 'sun:05:00-sun:06:00'
        StorageEncrypted: true
        DeletionProtection: false
        Tags:
          - Key: Name
            Value: ${self:service}-aurora-cluster-${self:provider.stage}
    
    # Aurora PostgreSQL Instance 1 (Primary)
    AuroraInstance1:
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: aurora-postgresql
        DBClusterIdentifier: !Ref AuroraCluster
        DBInstanceClass: db.t3.medium
        DBParameterGroupName: !Ref DBInstanceParameterGroup
        AvailabilityZone: ${self:provider.region}a
        PubliclyAccessible: false
        Tags:
          - Key: Name
            Value: ${self:service}-aurora-instance1-${self:provider.stage}
            
    # HTTP API
    HttpApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: ${self:service}-http-api-${self:provider.stage}
        ProtocolType: HTTP
        Description: HTTP API for Payment Processing System
        CorsConfiguration:
          AllowCredentials: true
          AllowHeaders:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
          AllowMethods:
            - GET
            - POST
            - PUT
            - OPTIONS
          AllowOrigins:
            - https://your-frontend-domain.com
          MaxAge: 300
        Tags:
          Name: ${self:service}-http-api-${self:provider.stage}
    
    # API Stage
    HttpApiStage:
      Type: AWS::ApiGatewayV2::Stage
      Properties:
        ApiId: !Ref HttpApi
        StageName: ${self:provider.stage}
        AutoDeploy: true
        Description: ${self:provider.stage} stage
        DefaultRouteSettings:
          ThrottlingBurstLimit: 20
          ThrottlingRateLimit: 10
        Tags:
          Name: ${self:service}-http-stage-${self:provider.stage}

    # CloudWatch Log Group for Lambdas
    ApiLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}
        RetentionInDays: 30

    # S3 Bucket for static content
    StaticContentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-static-${self:provider.stage}-575108919661
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        Tags:
          - Key: Name
            Value: ${self:service}-static-${self:provider.stage}

    # CloudFront Origin Access Identity for S3
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "Origin Access Identity for payment processing static content"

    # S3 Bucket Policy to allow CloudFront access
    StaticContentBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref StaticContentBucket
        PolicyDocument:
          Statement:
            - Action: s3:GetObject
              Effect: Allow
              Resource: !Join ['', ['arn:aws:s3:::', !Ref StaticContentBucket, '/*']]
              Principal:
                AWS: !Join ['', ['arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ', !Ref CloudFrontOriginAccessIdentity]]

    # CloudFront Distribution for static content and API
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          PriceClass: PriceClass_100
          HttpVersion: http2
          IPV6Enabled: true
          Comment: "Distribution for payment-processing-system - dev"
          DefaultRootObject: index.html
          Origins:
            # S3 Origin for static content
            - Id: S3Origin
              DomainName: !GetAtt StaticContentBucket.RegionalDomainName
              S3OriginConfig:
                OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
            # API Gateway Origin for API calls
            - Id: ApiOrigin
              DomainName: !Sub "${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
                OriginSSLProtocols:
                  - TLSv1.2
                OriginReadTimeout: 30
                OriginKeepaliveTimeout: 5
              OriginPath: /${self:provider.stage}
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            MinTTL: 0
            DefaultTTL: 86400    # 1 day
            MaxTTL: 31536000     # 1 year
          CacheBehaviors:
            - PathPattern: /api/*
              TargetOriginId: ApiOrigin
              ViewerProtocolPolicy: redirect-to-https
              AllowedMethods:
                - DELETE
                - GET
                - HEAD
                - OPTIONS
                - PATCH
                - POST
                - PUT
              CachedMethods:
                - GET
                - HEAD
                - OPTIONS
              ForwardedValues:
                QueryString: true
                Headers:
                  - Authorization
                  - Host
                Cookies:
                  Forward: all
              MinTTL: 0
              DefaultTTL: 0       # No caching for API calls
              MaxTTL: 0
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
              ErrorCachingMinTTL: 10
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
              ErrorCachingMinTTL: 10

  # Define outputs
  Outputs:
    HttpApiUrl:
      Description: "HTTP API Gateway Endpoint URL"
      Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}"
    CloudFrontDistributionDomainName:
      Description: "CloudFront Distribution Domain Name"
      Value: !GetAtt CloudFrontDistribution.DomainName
    AuroraDatabaseEndpoint:
      Description: "Aurora Database Endpoint"
      Value: !GetAtt AuroraCluster.Endpoint.Address
    StaticBucketName:
      Description: "S3 Bucket for Static Content"
      Value: !Ref StaticContentBucket