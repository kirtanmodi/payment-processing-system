service: payment-processing-system

provider:
  name: aws
  runtime: nodejs18.x
  profile: payrix
  region: us-east-1
  stage: ${opt:stage, 'dev'}

functions:
  # We'll define functions here later

resources:
  Resources:
    # VPC Configuration
    MainVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: ${self:service}-vpc-${self:provider.stage}
    
    # Internet Gateway for public subnets
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: ${self:service}-igw-${self:provider.stage}
    
    # Attach Internet Gateway to VPC
    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref MainVPC
    
    # Public Subnet in first Availability Zone
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MainVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: 10.0.1.0/24
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-public-subnet-1-${self:provider.stage}
    
    # Private Subnet in first Availability Zone
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MainVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: 10.0.2.0/24
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: ${self:service}-private-subnet-1-${self:provider.stage}
    
    # Public Subnet in second Availability Zone
    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MainVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: 10.0.3.0/24
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-public-subnet-2-${self:provider.stage}
    
    # Private Subnet in second Availability Zone
    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MainVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: 10.0.4.0/24
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: ${self:service}-private-subnet-2-${self:provider.stage}

    # Route Table for Public Subnets
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MainVPC
        Tags:
          - Key: Name
            Value: ${self:service}-public-rt-${self:provider.stage}
    
    # Default Route for Public Route Table
    PublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
    
    # Associate Public Subnet 1 with Public Route Table
    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable
    
    # Associate Public Subnet 2 with Public Route Table
    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet2
        RouteTableId: !Ref PublicRouteTable
    
    # Elastic IP for NAT Gateway 1
    NatGateway1EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
        Domain: vpc
        Tags:
          - Key: Name
            Value: ${self:service}-nat1-eip-${self:provider.stage}
    
    # NAT Gateway 1 in Public Subnet 1
    NatGateway1:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt NatGateway1EIP.AllocationId
        SubnetId: !Ref PublicSubnet1
        Tags:
          - Key: Name
            Value: ${self:service}-nat1-${self:provider.stage}
    
    # Elastic IP for NAT Gateway 2
    NatGateway2EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
        Domain: vpc
        Tags:
          - Key: Name
            Value: ${self:service}-nat2-eip-${self:provider.stage}
    
    # NAT Gateway 2 in Public Subnet 2
    NatGateway2:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt NatGateway2EIP.AllocationId
        SubnetId: !Ref PublicSubnet2
        Tags:
          - Key: Name
            Value: ${self:service}-nat2-${self:provider.stage}
    
    # Route Table for Private Subnet 1
    PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MainVPC
        Tags:
          - Key: Name
            Value: ${self:service}-private-rt1-${self:provider.stage}
    
    # Default Route for Private Route Table 1
    PrivateRoute1:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable1
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway1
    
    # Associate Private Subnet 1 with Private Route Table 1
    PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet1
        RouteTableId: !Ref PrivateRouteTable1
    
    # Route Table for Private Subnet 2
    PrivateRouteTable2:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MainVPC
        Tags:
          - Key: Name
            Value: ${self:service}-private-rt2-${self:provider.stage}
    
    # Default Route for Private Route Table 2
    PrivateRoute2:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable2
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway2
    
    # Associate Private Subnet 2 with Private Route Table 2
    PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet2
        RouteTableId: !Ref PrivateRouteTable2
        
    # Security Group for Application Load Balancer
    LoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for the application load balancer
        VpcId: !Ref MainVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: ${self:service}-alb-sg-${self:provider.stage}
    
    # Security Group for API Gateway VPC Link
    ApiGatewaySecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for API Gateway VPC Link
        VpcId: !Ref MainVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: ${self:service}-api-sg-${self:provider.stage}
    
    # Security Group for Fargate Tasks - Removed the circular reference
    FargateTaskSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Fargate tasks
        VpcId: !Ref MainVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3000
            ToPort: 3000
            SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          # Removed database reference from here
        Tags:
          - Key: Name
            Value: ${self:service}-fargate-sg-${self:provider.stage}
    
    # Security Group for Aurora Database - Removed the circular reference
    DatabaseSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Aurora database
        VpcId: !Ref MainVPC
        Tags:
          - Key: Name
            Value: ${self:service}-db-sg-${self:provider.stage}
    
    # Fargate to DB Egress Rule
    FargateToDbEgressRule:
      Type: AWS::EC2::SecurityGroupEgress
      Properties:
        GroupId: !Ref FargateTaskSecurityGroup
        IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        DestinationSecurityGroupId: !Ref DatabaseSecurityGroup

    # DB to Fargate Ingress Rule
    DbFromFargateIngressRule:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref DatabaseSecurityGroup
        IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref FargateTaskSecurityGroup
    
    # Application Load Balancer
    ApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: ${self:service}-alb-${self:provider.stage}
        Scheme: internet-facing
        Type: application
        SecurityGroups:
          - !Ref LoadBalancerSecurityGroup
        Subnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        IpAddressType: ipv4
        Tags:
          - Key: Name
            Value: ${self:service}-alb-${self:provider.stage}
    
    # Default ALB Target Group
    DefaultTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: ${self:service}-tg-${self:provider.stage}
        VpcId: !Ref MainVPC
        Port: 3000
        Protocol: HTTP
        TargetType: ip
        HealthCheckEnabled: true
        HealthCheckIntervalSeconds: 30
        HealthCheckPath: /health
        HealthCheckPort: traffic-port
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 3
        TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: '30'
        Tags:
          - Key: Name
            Value: ${self:service}-tg-${self:provider.stage}
    
    # HTTP Listener for ALB
    HttpListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn: !Ref ApplicationLoadBalancer
        Port: 80
        Protocol: HTTP
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref DefaultTargetGroup

plugins:
  - serverless-iam-roles-per-function