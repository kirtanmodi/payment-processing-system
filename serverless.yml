service: payment-processing-system

provider:
  name: aws
  runtime: nodejs18.x
  profile: payrix
  region: us-east-1
  stage: ${opt:stage, 'dev'}

custom:
  ecrRepository: "575108919661.dkr.ecr.us-east-1.amazonaws.com/payment-node-app"
  imageTag: "dev"

functions:
  # We'll define functions here later

resources:
  Resources:
    # VPC Configuration
    MainVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: ${self:service}-vpc-${self:provider.stage}
    
    # Internet Gateway for public subnets
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: ${self:service}-igw-${self:provider.stage}
    
    # Attach Internet Gateway to VPC
    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref MainVPC
    
    # Public Subnet in first Availability Zone
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MainVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: 10.0.1.0/24
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-public-subnet-1-${self:provider.stage}
    
    # Private Subnet in first Availability Zone
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MainVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: 10.0.2.0/24
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: ${self:service}-private-subnet-1-${self:provider.stage}
    
    # Public Subnet in second Availability Zone
    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MainVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: 10.0.3.0/24
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-public-subnet-2-${self:provider.stage}
    
    # Private Subnet in second Availability Zone
    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MainVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: 10.0.4.0/24
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: ${self:service}-private-subnet-2-${self:provider.stage}

    # Route Table for Public Subnets
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MainVPC
        Tags:
          - Key: Name
            Value: ${self:service}-public-rt-${self:provider.stage}
    
    # Default Route for Public Route Table
    PublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
    
    # Associate Public Subnet 1 with Public Route Table
    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable
    
    # Associate Public Subnet 2 with Public Route Table
    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet2
        RouteTableId: !Ref PublicRouteTable
    
    # Elastic IP for NAT Gateway 1
    NatGateway1EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
        Domain: vpc
        Tags:
          - Key: Name
            Value: ${self:service}-nat1-eip-${self:provider.stage}
    
    # NAT Gateway 1 in Public Subnet 1
    NatGateway1:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt NatGateway1EIP.AllocationId
        SubnetId: !Ref PublicSubnet1
        Tags:
          - Key: Name
            Value: ${self:service}-nat1-${self:provider.stage}
    
    # Elastic IP for NAT Gateway 2
    NatGateway2EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
        Domain: vpc
        Tags:
          - Key: Name
            Value: ${self:service}-nat2-eip-${self:provider.stage}
    
    # NAT Gateway 2 in Public Subnet 2
    NatGateway2:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt NatGateway2EIP.AllocationId
        SubnetId: !Ref PublicSubnet2
        Tags:
          - Key: Name
            Value: ${self:service}-nat2-${self:provider.stage}
    
    # Route Table for Private Subnet 1
    PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MainVPC
        Tags:
          - Key: Name
            Value: ${self:service}-private-rt1-${self:provider.stage}
    
    # Default Route for Private Route Table 1
    PrivateRoute1:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable1
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway1
    
    # Associate Private Subnet 1 with Private Route Table 1
    PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet1
        RouteTableId: !Ref PrivateRouteTable1
    
    # Route Table for Private Subnet 2
    PrivateRouteTable2:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MainVPC
        Tags:
          - Key: Name
            Value: ${self:service}-private-rt2-${self:provider.stage}
    
    # Default Route for Private Route Table 2
    PrivateRoute2:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable2
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway2
    
    # Associate Private Subnet 2 with Private Route Table 2
    PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet2
        RouteTableId: !Ref PrivateRouteTable2
        
    # Security Group for Application Load Balancer
    LoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for the application load balancer
        VpcId: !Ref MainVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: ${self:service}-alb-sg-${self:provider.stage}
    
    # Security Group for API Gateway VPC Link
    ApiGatewaySecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for API Gateway VPC Link
        VpcId: !Ref MainVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: ${self:service}-api-sg-${self:provider.stage}
    
    # Security Group for Fargate Tasks
    FargateTaskSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Fargate tasks
        VpcId: !Ref MainVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3000
            ToPort: 3000
            SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: ${self:service}-fargate-sg-${self:provider.stage}
    
    # Security Group for Aurora Database
    DatabaseSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Aurora database
        VpcId: !Ref MainVPC
        Tags:
          - Key: Name
            Value: ${self:service}-db-sg-${self:provider.stage}
    
    # Fargate to DB Egress Rule
    FargateToDbEgressRule:
      Type: AWS::EC2::SecurityGroupEgress
      Properties:
        GroupId: !Ref FargateTaskSecurityGroup
        IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        DestinationSecurityGroupId: !Ref DatabaseSecurityGroup

    # DB to Fargate Ingress Rule
    DbFromFargateIngressRule:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref DatabaseSecurityGroup
        IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId: !Ref FargateTaskSecurityGroup
    
    # Application Load Balancer with shorter name
    ApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: payrix-alb-${self:provider.stage}
        Scheme: internet-facing
        Type: application
        SecurityGroups:
          - !Ref LoadBalancerSecurityGroup
        Subnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        IpAddressType: ipv4
        Tags:
          - Key: Name
            Value: payrix-alb-${self:provider.stage}
    
    # Default ALB Target Group with shorter name
    DefaultTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: payrix-tg-${self:provider.stage}
        VpcId: !Ref MainVPC
        Port: 3000
        Protocol: HTTP
        TargetType: ip
        HealthCheckEnabled: true
        HealthCheckIntervalSeconds: 30
        HealthCheckPath: /health
        HealthCheckPort: traffic-port
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 3
        TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: '30'
        Tags:
          - Key: Name
            Value: payrix-tg-${self:provider.stage}
    
    # HTTP Listener for ALB
    HttpListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn: !Ref ApplicationLoadBalancer
        Port: 80
        Protocol: HTTP
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref DefaultTargetGroup
    
    # DB Subnet Group for Aurora
    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: Subnet group for Aurora database
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        Tags:
          - Key: Name
            Value: ${self:service}-db-subnet-group-${self:provider.stage}
    
    # Aurora Parameter Group
    DBClusterParameterGroup:
      Type: AWS::RDS::DBClusterParameterGroup
      Properties:
        Description: Parameter group for Aurora PostgreSQL cluster
        Family: aurora-postgresql16
        Parameters:
          timezone: 'America/Chicago'  # CST timezone
        Tags:
          - Key: Name
            Value: ${self:service}-db-cluster-param-group-${self:provider.stage}
    
    # DB Instance Parameter Group
    DBInstanceParameterGroup:
      Type: AWS::RDS::DBParameterGroup
      Properties:
        Description: Parameter group for Aurora PostgreSQL instances
        Family: aurora-postgresql16
        Parameters:
          max_connections: '200'
        Tags:
          - Key: Name
            Value: ${self:service}-db-param-group-${self:provider.stage}
    
    # Database password stored in Secrets Manager
    DatabaseSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:service}/db/password-${self:provider.stage}
        Description: "Aurora database password"
        GenerateSecretString:
          SecretStringTemplate: '{"username": "payrix_admin"}'
          GenerateStringKey: "password"
          PasswordLength: 16
          ExcludeCharacters: '"@/\'
    
    # Aurora PostgreSQL Cluster
    AuroraCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        Engine: aurora-postgresql
        EngineVersion: "16"
        DatabaseName: payrix
        MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:username}}' ]]
        MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:password}}' ]]
        DBClusterParameterGroupName: !Ref DBClusterParameterGroup
        DBSubnetGroupName: !Ref DBSubnetGroup
        VpcSecurityGroupIds:
          - !Ref DatabaseSecurityGroup
        BackupRetentionPeriod: 7
        PreferredBackupWindow: '03:00-04:00'
        PreferredMaintenanceWindow: 'sun:05:00-sun:06:00'
        StorageEncrypted: true
        DeletionProtection: false
        Tags:
          - Key: Name
            Value: ${self:service}-aurora-cluster-${self:provider.stage}
    
    # Aurora PostgreSQL Instance 1 (Primary)
    AuroraInstance1:
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: aurora-postgresql
        DBClusterIdentifier: !Ref AuroraCluster
        DBInstanceClass: db.t3.medium
        DBParameterGroupName: !Ref DBInstanceParameterGroup
        AvailabilityZone: ${self:provider.region}a
        PubliclyAccessible: false
        Tags:
          - Key: Name
            Value: ${self:service}-aurora-instance1-${self:provider.stage}

    # ECS Cluster
    ECSCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: ${self:service}-cluster-${self:provider.stage}
        CapacityProviders:
          - FARGATE
          - FARGATE_SPOT
        DefaultCapacityProviderStrategy:
          - CapacityProvider: FARGATE
            Weight: 1
        Tags:
          - Key: Name
            Value: ${self:service}-cluster-${self:provider.stage}

    # IAM Role for ECS Task Execution
    ECSTaskExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        Policies:
          - PolicyName: SecretsManagerAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - secretsmanager:GetSecretValue
                  Resource: !Ref DatabaseSecret
        Tags:
          - Key: Name
            Value: ${self:service}-task-execution-role-${self:provider.stage}

    # IAM Role for ECS Task
    ECSTaskRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: TaskPermissions
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: '*'
        Tags:
          - Key: Name
            Value: ${self:service}-task-role-${self:provider.stage}

    # CloudWatch Log Group for ECS Tasks
    ECSLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /ecs/${self:service}-${self:provider.stage}
        RetentionInDays: 14

    # ECS Task Definition
    PaymentProcessingTaskDefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Family: ${self:service}-task-${self:provider.stage}
        Cpu: '256'
        Memory: '512'
        NetworkMode: awsvpc
        RequiresCompatibilities:
          - FARGATE
        ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
        TaskRoleArn: !GetAtt ECSTaskRole.Arn
        ContainerDefinitions:
          - Name: payment-app
            Image: ${self:custom.ecrRepository}:${self:custom.imageTag}
            Essential: true
            PortMappings:
              - ContainerPort: 3000
                HostPort: 3000
                Protocol: tcp
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref ECSLogGroup
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: payment-app
            Environment:
              - Name: NODE_ENV
                Value: ${self:provider.stage}
              - Name: PORT
                Value: '3000'
              - Name: DB_HOST
                Value: !GetAtt AuroraCluster.Endpoint.Address
              - Name: DB_PORT
                Value: '5432'
              - Name: DB_NAME
                Value: payrix
              - Name: DB_USERNAME
                Value: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:username}}' ]]
            Secrets:
              - Name: DB_PASSWORD
                ValueFrom: !Join ['', [!Ref DatabaseSecret, ':password::'] ]
        Tags:
          - Key: Name
            Value: ${self:service}-task-${self:provider.stage}

    # ECS Service
    PaymentProcessingService:
      Type: AWS::ECS::Service
      DependsOn: HttpListener
      Properties:
        ServiceName: ${self:service}-service-${self:provider.stage}
        Cluster: !Ref ECSCluster
        TaskDefinition: !Ref PaymentProcessingTaskDefinition
        DesiredCount: 2
        LaunchType: FARGATE
        DeploymentConfiguration:
          MaximumPercent: 200
          MinimumHealthyPercent: 100
          DeploymentCircuitBreaker:
            Enable: true
            Rollback: true
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            SecurityGroups:
              - !Ref FargateTaskSecurityGroup
            Subnets:
              - !Ref PrivateSubnet1
              - !Ref PrivateSubnet2
        LoadBalancers:
          - ContainerName: payment-app
            ContainerPort: 3000
            TargetGroupArn: !Ref DefaultTargetGroup
        HealthCheckGracePeriodSeconds: 60
        Tags:
          - Key: Name
            Value: ${self:service}-service-${self:provider.stage}

    # CloudFront Origin Access Identity for S3
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "Origin Access Identity for payment processing static content"

    # S3 Bucket for static content
    StaticContentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-static-${self:provider.stage}-575108919661
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        Tags:
          - Key: Name
            Value: ${self:service}-static-${self:provider.stage}

    # S3 Bucket Policy to allow CloudFront access
    StaticContentBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref StaticContentBucket
        PolicyDocument:
          Statement:
            - Action: s3:GetObject
              Effect: Allow
              Resource: !Join ['', ['arn:aws:s3:::', !Ref StaticContentBucket, '/*']]
              Principal:
                AWS: !Join ['', ['arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ', !Ref CloudFrontOriginAccessIdentity]]

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          PriceClass: PriceClass_100
          HttpVersion: http2
          IPV6Enabled: true
          Comment: "Distribution for payment-processing-system - dev"
          DefaultRootObject: index.html
          Origins:
            # S3 Origin for static content
            - Id: S3Origin
              DomainName: !GetAtt StaticContentBucket.RegionalDomainName
              S3OriginConfig:
                OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
            # Load Balancer Origin for API calls
            - Id: ALBOrigin
              DomainName: !GetAtt ApplicationLoadBalancer.DNSName
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
                OriginSSLProtocols:
                  - TLSv1.2
                OriginReadTimeout: 30
                OriginKeepaliveTimeout: 5
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            MinTTL: 0
            DefaultTTL: 86400    # 1 day
            MaxTTL: 31536000     # 1 year
          CacheBehaviors:
            - PathPattern: /api/*
              TargetOriginId: ALBOrigin
              ViewerProtocolPolicy: redirect-to-https
              AllowedMethods:
                - DELETE
                - GET
                - HEAD
                - OPTIONS
                - PATCH
                - POST
                - PUT
              CachedMethods:
                - GET
                - HEAD
                - OPTIONS
              ForwardedValues:
                QueryString: true
                Headers:
                  - Authorization
                  - Host
                Cookies:
                  Forward: all
              MinTTL: 0
              DefaultTTL: 0       # No caching for API calls
              MaxTTL: 0
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
              ErrorCachingMinTTL: 10
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
              ErrorCachingMinTTL: 10

    # VPC Link for API Gateway to connect to the private ALB
    HttpApiVpcLink:
      Type: AWS::ApiGatewayV2::VpcLink
      Properties:
        Name: ${self:service}-http-vpc-link-${self:provider.stage}
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref ApiGatewaySecurityGroup

    # HTTP API
    HttpApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: ${self:service}-http-api-${self:provider.stage}
        ProtocolType: HTTP
        Description: HTTP API for Payment Processing System
        DisableExecuteApiEndpoint: false
        Tags:
          Name: ${self:service}-http-api-${self:provider.stage}
        CorsConfiguration:
          AllowOrigins:
            - '*' # change to your frontend domain
          AllowMethods:
            - GET
            - POST
            - PUT
            - DELETE
            - OPTIONS
          AllowHeaders:
            - Content-Type
            - Authorization
            - X-Amz-Date
            - X-Api-Key
            - X-Amz-Security-Token
          MaxAge: 300

    # Integration with ALB
    HttpApiIntegration:
      Type: AWS::ApiGatewayV2::Integration
      Properties:
        ApiId: !Ref HttpApi
        IntegrationType: HTTP_PROXY
        IntegrationMethod: ANY
        IntegrationUri: !GetAtt HttpListener.ListenerArn
        ConnectionType: VPC_LINK
        ConnectionId: !Ref HttpApiVpcLink
        PayloadFormatVersion: '1.0'
        TimeoutInMillis: 30000

    # Routes for each endpoint
    HealthCheckRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId: !Ref HttpApi
        RouteKey: 'GET /health'
        Target: !Join ['/', ['integrations', !Ref HttpApiIntegration]]

    GetPaymentsRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId: !Ref HttpApi
        RouteKey: 'GET /api/payments'
        Target: !Join ['/', ['integrations', !Ref HttpApiIntegration]]

    CreatePaymentRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId: !Ref HttpApi
        RouteKey: 'POST /api/payments'
        Target: !Join ['/', ['integrations', !Ref HttpApiIntegration]]

    GetPaymentByIdRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId: !Ref HttpApi
        RouteKey: 'GET /api/payments/{id}'
        Target: !Join ['/', ['integrations', !Ref HttpApiIntegration]]

    UpdatePaymentStatusRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId: !Ref HttpApi
        RouteKey: 'PUT /api/payments/{id}/status'
        Target: !Join ['/', ['integrations', !Ref HttpApiIntegration]]

    # API Stage
    HttpApiStage:
      Type: AWS::ApiGatewayV2::Stage
      Properties:
        ApiId: !Ref HttpApi
        StageName: ${self:provider.stage}
        AutoDeploy: true
        Description: ${self:provider.stage} stage
        DefaultRouteSettings:
          ThrottlingBurstLimit: 20
          ThrottlingRateLimit: 10
        Tags:
          Name: ${self:service}-http-stage-${self:provider.stage}

# Outputs
outputs:
  CloudFrontDistributionId:
    Description: "CloudFront Distribution ID"
    Value: !Ref CloudFrontDistribution
  CloudFrontDomainName:
    Description: "CloudFront Distribution Domain Name"
    Value: !GetAtt CloudFrontDistribution.DomainName
  HttpApiUrl:
    Description: "HTTP API Gateway Endpoint URL"
    Value: !Join 
      - ''
      - - !GetAtt HttpApi.ApiEndpoint
        - '/'
        - ${self:provider.stage}
  HttpApiId:
    Description: "HTTP API Gateway ID"
    Value: !Ref HttpApi

plugins:
  - serverless-iam-roles-per-function